"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWebpackConfigResolve = getWebpackConfigResolve;
exports.isInstanceOfResolvePlugin = isInstanceOfResolvePlugin;

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getWebpackConfigResolve(cosmosConfig, webpackConfig) {
  return removeModuleScopePlugin(resolveLocalReactDeps(cosmosConfig, webpackConfig.resolve));
}

function removeModuleScopePlugin() {
  var resolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var plugins = resolve.plugins;
  if (!plugins) return resolve;
  return _objectSpread(_objectSpread({}, resolve), {}, {
    plugins: plugins.filter(function (p) {
      return !isInstanceOfResolvePlugin(p, 'ModuleScopePlugin');
    })
  });
}

function resolveLocalReactDeps(cosmosConfig) {
  var resolve = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var rootDir = cosmosConfig.rootDir;
  var alias = resolve.alias || {}; // Preserve existing React aliases (eg. when using Preact)

  var reactAlias = hasAlias(alias, 'react');
  var reactDomAlias = hasAlias(alias, 'react-dom');

  if (reactAlias && reactDomAlias) {
    console.log('[Cosmos] React and React DOM aliases found in webpack config');
    return resolve;
  }

  if (reactAlias) {
    console.log('[Cosmos] React alias found in webpack config');
  } else {
    var reactPath = _resolveFrom.default.silent(rootDir, 'react');

    if (!reactPath) throw new Error("[Cosmos] Local dependency not found: react");
    alias = addAlias(alias, 'react', _path.default.dirname(reactPath));
  }

  if (reactDomAlias) {
    console.log('[Cosmos] React DOM alias found in webpack config');
  } else {
    var reactDomPath = _resolveFrom.default.silent(rootDir, 'react-dom');

    if (!reactDomPath) throw new Error("[Cosmos] Local dependency not found: react-dom");
    alias = addAlias(alias, 'react-dom', _path.default.dirname(reactDomPath));
  }

  return _objectSpread(_objectSpread({}, resolve), {}, {
    alias: alias
  });
}

function hasAlias(alias, name) {
  if (!alias) return false;
  var exactName = "".concat(name, "$");

  if (Array.isArray(alias)) {
    return alias.some(function (a) {
      return a.name === name || a.name === exactName;
    });
  } else {
    var keys = Object.keys(alias);
    return keys.includes(name) || keys.includes(exactName);
  }
}

function addAlias(alias, name, value) {
  return Array.isArray(alias) ? [].concat(_toConsumableArray(alias), [{
    name: name,
    alias: value
  }]) : _objectSpread(_objectSpread({}, alias), {}, _defineProperty({}, name, value));
}

function isInstanceOfResolvePlugin(plugin, constructorName) {
  return plugin.constructor && plugin.constructor.name === constructorName;
}