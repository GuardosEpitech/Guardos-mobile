"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findRelevantElementPaths = findRelevantElementPaths;

var _nodeTree = require("./nodeTree");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function findRelevantElementPaths(node) {
  var elPaths = (0, _nodeTree.findElementPaths)(node);
  return elPaths.filter(function (elPath) {
    var _getExpectedElementAt = (0, _nodeTree.getExpectedElementAtPath)(node, elPath),
        type = _getExpectedElementAt.type; // Ignore symbol types, like StrictMode
    // https://github.com/react-cosmos/react-cosmos/issues/1249


    if (_typeof(type) === 'symbol') return false;
    if (typeof type === 'string') return isInterestingTag(type);
    var classType = type;
    return classType.cosmosCapture !== false && isInterestingClass(classType);
  });
}

function isInterestingTag(tagName) {
  // TODO: Make this customizable
  return tagName !== 'div' && tagName !== 'span';
}

function isInterestingClass(type) {
  // TODO: Make this customizable
  return type.name !== 'StyledComponent';
}