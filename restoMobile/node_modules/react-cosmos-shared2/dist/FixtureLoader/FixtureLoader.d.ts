import React, { Component } from 'react';
import { FixtureState, SetFixtureState } from '../fixtureState';
import { ReactDecorator, ReactDecorators, ReactFixtureWrappers } from '../react';
import { FixtureId, RendererConnect, RendererRequest, RendererResponse, SelectFixtureRequest, SetFixtureStateRequest } from '../renderer';
export declare type Props = {
    rendererId: string;
    rendererConnect: RendererConnect;
    fixtures: ReactFixtureWrappers;
    initialFixtureId?: FixtureId;
    selectedFixtureId?: null | FixtureId;
    systemDecorators: ReactDecorator[];
    userDecorators: ReactDecorators;
    renderMessage?: (args: {
        msg: string;
    }) => React.ReactNode;
    onErrorReset?: () => unknown;
};
declare type SelectedFixture = {
    fixtureId: FixtureId;
    fixtureState: FixtureState;
    syncedFixtureState: FixtureState;
};
declare type State = {
    selectedFixture: null | SelectedFixture;
    renderKey: number;
};
export declare class FixtureLoader extends Component<Props, State> {
    state: State;
    unsubscribe: null | (() => unknown);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Props): void;
    shouldComponentUpdate(prevProps: Props, prevState: State): boolean;
    render(): React.ReactNode;
    handleRequest: (msg: RendererRequest) => void;
    handleSelectFixtureRequest({ payload }: SelectFixtureRequest): void;
    handleUnselectFixtureRequest(): void;
    handleSetFixtureStateRequest({ payload }: SetFixtureStateRequest): void;
    postReadyState(): void;
    postFixtureListUpdate(): void;
    postFixtureStateChange: (fixtureId: FixtureId, fixtureState: FixtureState) => void;
    setFixtureState: SetFixtureState;
    getFixtureList(): {
        [x: string]: import("../renderer").FixtureListItem;
    };
    fireChangeCallback(): void;
    updateSyncedFixtureState(syncedFixtureState: FixtureState): void;
    postMessage(msg: RendererResponse): void;
    renderMessage(msg: string): React.ReactNode;
}
export {};
